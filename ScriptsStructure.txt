[AnimationClipLibrary]
LoadAssetsAsync(List<string>)
UnloadAll
Get(string)

- #게임 시작 시 외부에서 Load, 이탈 시 Unload 필요.
- 캐릭터 AnimationPlayer에서 Get 해서 사용.

[PhysicsResolver]
Resister(PhysicsEntity)
Unregister(PhysicsEntity)
Tick() : BodyBox 밀쳐내기 -> 히트/잡기/가드유발 -> 위치 해소 -> 이동 속도 적용
ResolveX(Rect, Rect)

- #외부에서 TickMaster 등록 필요
- 외부 엔티티들 Register 필요

[InputData]
enum Direction
[Flags] enum AttackKey
backCharge
downCharge

[CommandRecognizer]
Recognize(Queue<InputData>, List<Skill>) : 모든 Skill을 Match
Match(Queue<InputData>, SkillInputData[]) : 공격 체크 -> 방향 체크
MatchInput(InputData, SkillInputData) : 차지 체크 -> 방향 체크
MatchAttack(InputData[], SkillinputData)
DirectionMatches(Direction, Direction)

- 캐릭터 SkillExecutor에서 Recognize 호출

[TickMaster]
- 외부에서 Register 필요

[Skill]
스킬명
설명
커맨드
피해량
히트스턴시간
블록스턴시간
런치 여부
넉다운 여부
애니메이션클립이름
다음스킬배열
박스정보

[SkillExecutor]
Tick : InputRecognizer.Recognize() -> PlaySkill()
PlaySkill : animator.Play(), entity.RefreshBoxes, property:currentSkill, usableSkills갱신
ReturnToNeutralPose

- property갱신

[InputBuffer]
Tick : inputQueue.Enqueue
ContainsBack / ContainsDown / ToDirection / ReadAttackKey

[CharacterProperty]
HitDirection / HitRegion -> LastHitInfo
(CharacterStateTag)
자세별 bodyBox
자세별 hurtBox
자세별 whiffBox
자세별 Skills
usableSkills
currentSkill

<#갱신 필요>
isGuarding
isJumping
isSitting
isFacingRight
isSpecialPosing
isAttacking
lastHitInfo

- #자세별 박스 갱신 필요
- SkillExecutor에서 자세별 스킬 갱신
- #상태 bool 갱신 필요
- #피격 시 lastHitInfo 갱신 필요

[AnimationPlayer]
Play
Tick

[PhysicsEntity]
gravity

Tick : 중력적용
ApplyOffset / ApplyVelocity : PhysicsResolver에서 처리
OnHit / OnThrow / OnGuardTrigger : PhysicsResolver에서 처리
EstimateHitPoint

<#갱신 필요>
BodyBox
velocity
grounded
RefreshBoxes

<#수정 필요>
DetermineRegion

- #자세 별 바디박스 갱신 필요
- #중력 제외 속도 갱신 필요
- #grounded 판정 필요(tick에서 해야할듯
- #RefreshBoxes 공격/자세변경 시 갱신 필요

[BoxComponent]
BoxType / center / size / layer : #layer 빼도 될듯?
isTrigger / isEnabled / hitDirection : direction 불필요 문제는 나중에 고려
WorldBounds / TL / BR
기즈모

[BoxPresetApplier]
currentSkill
animPlayer
currentBoxes

Tick : ClearExpiredBoxes -> animPlayer.currentFrame == currentSkill.boxLifetimes.startFrame
FrameTag : endFrame
ClearExpiredBoxes : GetComponent<FrameTag>

- #currentSkill 받아오는 방식으로 변경할 것.
- #피격 등 자세 변경 시 전체 삭제하도록 변경.
- #SkillExecutor에서 호출?

[CharacterFSM]
- #State 풀링
- #디버그용 정지/강제 Transition + 한 프레임 씩 실행(되돌리기?)

[IdleState]
[WalkState]
[JumpState]
[FallState]
[LandState]
[CrouchState]

[SkillState]
[HitStunState]
[BlockStunState]
[AirStunState]
[ThrowState]
[BeingThrownState]
[DownState]
[WakeUpState]

[ForcedAnimationState]